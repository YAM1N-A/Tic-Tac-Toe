import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic-Tac-Toe")
        self.root.configure(bg="green")  # CHANGED: Set the main window background color to green
        self.board = [""] * 9  # Stores the board state
        self.current_player = "X"  # Start with Player X
        self.buttons = []
        self.create_widgets()

    def create_widgets(self):
        # Create a 3x3 grid of buttons
        for i in range(9):
            button = tk.Button(
                self.root, text="", font=("Arial", 32), width=4, height=2,
                bg="lightgreen",  # CHANGED: Button background color
                command=lambda i=i: self.make_move(i)
            )
            button.grid(row=i//3, column=i%3, padx=5, pady=5)  # Added padding for better spacing
            self.buttons.append(button)

        # Reset button
        reset_button = tk.Button(
            self.root, text="Reset Game", font=("Arial", 16),
            bg="yellow",  # CHANGED: Reset button color for contrast
            command=self.reset_game
        )
        reset_button.grid(row=3, column=0, columnspan=3, pady=10)  # Added padding for reset button

    def make_move(self, index):
        if not self.board[index] and not self.check_winner():  # Only allow empty cells
            self.board[index] = self.current_player
            self.buttons[index].config(text=self.current_player)
            if self.check_winner():
                messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
                self.disable_buttons()
            elif "" not in self.board:
                messagebox.showinfo("Game Over", "It's a draw!")
            else:
                # Switch player
                self.current_player = "O" if self.current_player == "X" else "X"

    def check_winner(self):
        # Winning combinations
        winning_combinations = [
            (0, 1, 2), (3, 4, 5), (6, 7, 8),  # Rows
            (0, 3, 6), (1, 4, 7), (2, 5, 8),  # Columns
            (0, 4, 8), (2, 4, 6)              # Diagonals
        ]
        for a, b, c in winning_combinations:
            if self.board[a] == self.board[b] == self.board[c] and self.board[a] != "":
                return True
        return False

    def disable_buttons(self):
        for button in self.buttons:
            button.config(state=tk.DISABLED)

    def reset_game(self):
        self.board = [""] * 9
        self.current_player = "X"
        for button in self.buttons:
            button.config(text="", state=tk.NORMAL)

# Create the application window and run the game
if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
